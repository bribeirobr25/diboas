name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changes in ${{ steps.get_version.outputs.VERSION }}
            
            ### Features
            - Enhanced financial platform with comprehensive security monitoring
            - Advanced DeFi protocol integrations
            - Real-time performance monitoring
            - Tax optimization and lending pool services
            
            ### Security
            - Comprehensive threat detection and response system
            - GDPR, PCI DSS, and SOX compliance monitoring
            - Advanced anomaly detection for authentication and transactions
            
            ### Performance
            - Optimized bundle sizes with code splitting
            - Multi-level caching system
            - Real-time performance metrics and alerting
            
            See the [CHANGELOG](CHANGELOG.md) for more details.

  build-and-deploy:
    name: Build and Deploy Release
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        environment: [staging, production]
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run full test suite
        run: |
          pnpm run lint
          pnpm run typecheck
          pnpm run test
          
      - name: Build for release
        run: pnpm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ needs.create-release.outputs.version }}
          
      - name: Generate production bundle report
        run: |
          pnpm add -D webpack-bundle-analyzer
          npx vite-bundle-analyzer dist/
          
      - name: Create deployment package
        run: |
          tar -czf diboas-${{ matrix.environment }}-${{ needs.create-release.outputs.version }}.tar.gz dist/
          
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./diboas-${{ matrix.environment }}-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: diboas-${{ matrix.environment }}-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Deploy to ${{ matrix.environment }}
        run: |
          echo "Deploying version ${{ needs.create-release.outputs.version }} to ${{ matrix.environment }}"
          # Add actual deployment commands here
          # This would typically involve:
          # 1. Uploading to cloud storage (S3, GCS, etc.)
          # 2. Updating CDN configuration
          # 3. Running database migrations if needed
          # 4. Updating environment configurations
          
      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification for ${{ matrix.environment }}"
          # Add verification commands here
          # This would typically involve:
          # 1. Health checks
          # 2. Smoke tests
          # 3. Performance baseline checks
          # 4. Security scan verification

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.build-and-deploy.result == 'success' }}
        run: |
          echo "üéâ Release ${{ needs.create-release.outputs.version }} deployed successfully!"
          # Add notification logic here (Slack, Discord, email, etc.)
          
      - name: Notify failure
        if: ${{ needs.build-and-deploy.result == 'failure' }}
        run: |
          echo "‚ùå Release ${{ needs.create-release.outputs.version }} deployment failed!"
          # Add failure notification logic here